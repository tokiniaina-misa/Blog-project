name: CI-CD

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: [unit, integration]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Préparer l'environnement
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          chmod 600 .env
          echo "DJANGO_SETTINGS_MODULE=blogproject.settings" >> $GITHUB_ENV

      - name: Installer les dépendances
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Exécuter les tests ${{ matrix.type }}
        run: pytest tests/${{ matrix.type }}/ --junitxml=${{ matrix.type }}-results.xml

      - name: Sauvegarder les résultats ${{ matrix.type }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: resultats-tests-${{ matrix.type }}
          path: ${{ matrix.type }}-results.xml

  build-and-push:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: tokiniainami/blog-django:latest

  deploiement-infrastructure:
    runs-on: ubuntu-latest
    needs: [tests,build-and-push]
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v3
      - name: Installer Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      - name: Configurer les identifiants AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Initialiser Terraform
        run: terraform -chdir=infra init
      - name: Appliquer Terraform
        run: terraform -chdir=infra apply -auto-approve -var="ssh_public_key=${{ vars.SSH_PUBLIC_KEY }}" -var="env_file=${{ secrets.ENV_FILE }}"
      - name: Pause pour stabilisation
        run: sleep 50
      - name: Récupérer l'IP EC2
        id: get_ip
        run: |
          SERVER_IP=$(terraform -chdir=infra output -raw server_ip | tr -d '\n')
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          echo "$SERVER_IP" > server_ip.txt
      - name: Sauvegarder l'IP EC2
        uses: actions/upload-artifact@v4
        with:
          name: ip-ec2
          path: server_ip.txt

  test-disponibilite:
    needs: deploiement-infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ip-ec2
          path: .
      - id: get_ip
        run: echo "server_ip=$(cat server_ip.txt | tr -d '\n')" >> $GITHUB_OUTPUT
      - name: Test + métriques
        env:
          SERVER_IP: ${{ steps.get_ip.outputs.server_ip }}
        run: |
          FILE=metrics.json
          echo "{" > $FILE
          for i in {1..5}; do
            START=$(date +%s%3N)
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVER_IP:8000 || echo "000")
            END=$(date +%s%3N)
            RESPONSE_TIME=$((END - START))

            if [ "$STATUS" -ge 200 ] && [ "$STATUS" -lt 400 ]; then
              SUCCESS=true
            else
              SUCCESS=false
            fi

            echo "  \"attempt_$i\": {\"success\": $SUCCESS, \"status\": $STATUS, \"response_time_ms\": $RESPONSE_TIME}" >> $FILE
            [ $i -lt 5 ] && echo "," >> $FILE

            echo "Attente 10s..."
            sleep 10
          done
          echo "}" >> $FILE
      - uses: actions/upload-artifact@v4
        with:
          name: test-disponibilite-metrics
          path: metrics.json
